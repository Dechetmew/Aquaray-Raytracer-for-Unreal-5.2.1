//AQUARAY RAYTRACER - v0.4.15 Functions File

#pragma once
#include "../DeferredLightingCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingDeferredShadingCommon.ush"
#include "RayTracingLightingCommon.ush"

/////////////////////////////////////////////////// FUNCTIONS

float3 UniformSampleSphereInVolume(float2 rand)
{
	float z = 1.0f - 2.0f * rand.x;                     // Map rand.x from [0,1] to [-1,1]
	float r = sqrt(saturate(1.0f - z * z));             // radius in XY plane
	float phi = 6.2831853f * rand.y;                    // 2Ï€ * rand.y

	float x = r * cos(phi);
	float y = r * sin(phi);

	return float3(x, y, z);                             // Unit vector on sphere
}

//Different Hash?
float Hash13(float3 p)
{
    p = frac(p * 0.1031);
    p += dot(p, p.yzx + 33.33);
    return frac((p.x + p.y) * p.z);
}

// Uniformly distributed direction in hemisphere
float3 SampleHemisphere(float3 normal, float3 seed, int index)
{
    float rand1 = Hash13(seed + index * 2.357f); // for azimuth
    float rand2 = Hash13(seed + index * 7.753f); // for elevation

    float phi = rand1 * 2.0f * 3.14159265f;
    float z = rand2; // uniform in [0,1]
    float r = sqrt(1.0f - z * z);

    float3 localDir = float3(r * cos(phi), r * sin(phi), z);

    // Create TBN basis
    float3 up = abs(normal.z) < 0.999f ? float3(0,0,1) : float3(1,0,0);
    float3 tangent = normalize(cross(up, normal));
    float3 bitangent = cross(normal, tangent);

    // Transform to world space
    return tangent * localDir.x + bitangent * localDir.y + normal * localDir.z;
}

//Builds a Rotation Matrix for rotating a vector
float3x3 BuildRotationMatrixFromZ(float3 N)
{
    float3 Up = N;
    float3 Tangent = normalize(abs(Up.z) < 0.999f ? cross(Up, float3(0,0,1)) : float3(1,0,0));
    float3 Bitangent = normalize(cross(Tangent, Up));

    return transpose(float3x3(Tangent, Bitangent, Up));
}

float3x3 BuildTangentBasis(float3 N)
{
    float3 up = abs(N.z) < 0.999f ? float3(0, 0, 1) : float3(1, 0, 0);

    float3 T = normalize(cross(up, N)); // Tangent
    float3 B = normalize(cross(N, T));  // Bitangent

    return float3x3(T, B, N);
}

//Hashes a float
float Hash(float3 p)
{
    p = frac(p * 0.3183099f + float3(0.1f, 0.2f, 0.3f));
    p *= 17.0f;
    return frac(p.x * p.y * p.z * (p.x + p.y + p.z));
}

//Generates a Random Value From Hit Geometry Data (worldpos and distance)
float GeometryRand(float3 HitPos, float RayDist)
{
    // Combine HitPos and RayDist into a single float3 input
    float3 seed = HitPos * 0.05f + RayDist;
    return Hash(seed);
}

//Same as GeometryRand, but should output a random vec3 instead
float3 GeometryRandVec3(float3 HitPos, float RayDist)
{
    float3 base = HitPos * 0.05f + RayDist;

    return float3(
        Hash(base + float3(17.0f, 0.0f, 0.0f)),
        Hash(base + float3(0.0f, 31.0f, 0.0f)),
        Hash(base + float3(0.0f, 0.0f, 47.0f))
    );
}

//Returns 1.0f on every Other Pixel, Unused
bool IsCheckerboardFromUV(float2 UV, float2 ScreenSize)
{
    uint U = (uint)(UV.x * ScreenSize.x);
    uint V = (uint)(UV.y * ScreenSize.y);
    return ((U + V) & 1) == 0;
}

//Gets Skylight Color at Provided Direction and Blur Level
float3 GetSkyRadiance(float3 Direction, float Roughness)
{
	float SkyAverageBrightness = 1.0f;
	return GetSkyLightReflection(Direction, Roughness, SkyAverageBrightness);
}

//Applies Blinn-Phong Specular, for Metallic Surfaces
float BlinnPhongSpecular(float3 LightVector, float3 SurfaceNormal, float3 IncidentVector)
{
	float3 A = IncidentVector * -1.0f;
	float3 B = LightVector + A;
	float3 C = normalize(B);
	float D = dot(C, SurfaceNormal);
	float E = saturate(D);
	float F = pow(E, 32.0f);
	
	return F;
}

//Applies Phong Specular, for Plastic Surfaces
float PhongSpecular(float3 LightVector, float3 SurfaceNormal, float3 IncidentVector)
{
	float3 A = reflect(LightVector, SurfaceNormal);
	float C = dot(A, IncidentVector);
	float D = saturate(C);
	float E = pow(D, 8.0f);

	return E;
}

//This Simulates Lamberts Law. If you are inputing the Vector Towards the Light Source, Please Reverse it
float Lambert(float3 LightVector, float3 SurfaceNormal)
{
	return 1.0f * max(0.0f, dot(SurfaceNormal, LightVector));
}

//Converts Distance From Meters to Centimeters
float MetersToCenti(float DistanceInMeters)
{
	return DistanceInMeters * 100.0f;
}

//Converts Distance From Centimeters to Meters
float CentiToMeter(float DistanceInCentimeters)
{
	return DistanceInCentimeters / 100.0f;
}

//Returns a Yep when a Surface can be Possiblity lit by this Light Source, a Nope when it cant
bool CanBeLit(float3 WorldNormal, float3 LightVector)
{
    return dot(WorldNormal, LightVector) > 0.0f;
}

//Combines Plastic and Metallic Specular into Final Specular Contribution based on Metallic Input
float PerformSpecular(float3 WorldNormal, float3 LightVector, float3 IncidentVector, float SurfaceSpecular, float SurfaceMetallic, float3 LightColor)
{
	float AveragedLightColor = (LightColor.r + LightColor.g + LightColor.b) / 3.0f;
	float ClampedLightColor = clamp(AveragedLightColor, 0.0f, 1.5f);
	return lerp(PhongSpecular(LightVector, WorldNormal, IncidentVector), BlinnPhongSpecular(LightVector, WorldNormal, IncidentVector), SurfaceMetallic) * SurfaceSpecular * ClampedLightColor;
}