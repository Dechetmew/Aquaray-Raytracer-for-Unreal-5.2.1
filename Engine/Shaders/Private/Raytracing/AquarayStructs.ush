// AQUARAY RAYTRACER STRUCTS

	struct Raysample
	{
		float3 Color;                         //BaseColor of the last hit matte Surface or sky
		float  Metallic;                      //Used for Specular Calculation
		float  Specular;                      //Amount of Specular to apply
		float3  Emissive;                     //Emissive for Bloom
		float  Roughness;                     //Might be unused? As roughness should only affect the ray path? (it does affect specular, consider for later)
	
		float3 LightColor;                    //Color of the light that is directly shining on the Surface
		float  LightingContribution;          //How much power the Direct Lights have after absorption
	
		float3 IndirectLightColor;            //Color of Indirect Light that reached this pixel (via GIgrid Shader)
		float  IndirectLightingContribution;  //Power of Indirect Light that reached this pixel (via GIgrid Shader)
		float  RTAO;                          //Raytraced Ambient Occlusion
	
		float3 IndirectRadianceColor;         //Tint caused by Nearby lit surfaces
		float3 IndirectRadianceContribution;  //Unused
		
		float3 IndirectEmissive;              //Short Range Glow from Emissive Surfaces
		
		float DirectionalLightMask;           //a 0 to 1 mask for smoothly mixing indirect and direct light
	
		//More stuff will be added later
		//Currently, Indirect Radiance will be disabled as Implementation is wrong. I cant know how much color I should add without knowing how much surrounding surfaces are lit
	};

	struct DiffuseKernel
	{
		float3 Offset;       //Stores which direction diffuse rays fire
		float3 Color;        //Base Color of Sampled Surfaces
		float  Contribution; //UNUSED
		float3 LightColor;   //UNUSED
		float3 Radiance;     //Emissive of Sampled Surfaces
		float3 Position;     //Hit Position of Sampled Surfaces
		float  Distance;     //Distance to closest surface
		float3 Normal;       //WorldNormal of Sampled Surfaces
	};

	struct Stats
	{	
		float3 RaysPerPixel;
		float3 Steps;
	};
	
struct SurfaceHit
{
	float3 HitPos;
	float Distance;
	float3 IncidentVector;
	float3 ReflectionVector;
	float3 RefractionVector;
};
	
/////////GLOBAL ILLUMINATION

static const float3 DirectionSet[85] =
{
		//float3( 0.0,  0.0,  0.0),
		float3( 0.123,  0.123, -0.123),
        float3(-0.701, -0.408, -0.584),
        float3( 0.517, -0.743, -0.426),
        float3(-0.214, -0.204,  0.956),
        float3( 0.302,  0.411, -0.860),
        float3(-0.852,  0.452,  0.264),
        float3(-0.591, -0.806, -0.032),
        float3( 0.817, -0.221, -0.532),
        float3( 0.019, -0.975, -0.222),
        float3( 0.189,  0.961, -0.204),
        float3(-0.378,  0.650, -0.659),
        float3(-0.455, -0.528,  0.717),
        float3( 0.091,  0.568,  0.818),
        float3(-0.992, -0.004, -0.123),
        float3( 0.744,  0.600, -0.294),
        float3( 0.561, -0.007,  0.828),
        float3( 0.135, -0.195, -0.971),
        float3(-0.033, -0.772,  0.635),
        float3( 0.679,  0.254,  0.689),
        float3(-0.655,  0.733, -0.182),
        float3(-0.162, -0.914, -0.371),
        float3( 0.837, -0.545,  0.045),
        float3(-0.488,  0.200,  0.850),
        float3( 0.351, -0.539,  0.766),
        float3( 0.272,  0.907,  0.321),
        float3(-0.215,  0.898,  0.384),
        float3(-0.609, -0.078, -0.789),
        float3( 0.975,  0.184,  0.126),
        float3( 0.022, -0.368,  0.929),
        float3(-0.379, -0.920,  0.096),
        float3(-0.631,  0.370, -0.681),
        float3( 0.751, -0.343,  0.564),
        float3( 0.193, -0.981,  0.028),
        float3( 0.511,  0.720,  0.470),
        float3(-0.738,  0.665,  0.112),
        float3(-0.463, -0.622, -0.631),
        float3( 0.610, -0.736,  0.292),
        float3( 0.032,  0.152, -0.988),
        float3(-0.853, -0.206,  0.479),
        float3( 0.399, -0.139, -0.906),
        float3( 0.267, -0.712, -0.650),
        float3(-0.139,  0.386, -0.912),
        float3(-0.789,  0.015, -0.614),
        float3( 0.672,  0.681,  0.291),
        float3(-0.118, -0.554, -0.824),
        float3( 0.899,  0.432,  0.068),
        float3(-0.021,  0.998,  0.056),
        float3(-0.516,  0.848, -0.118),
        float3( 0.611, -0.314, -0.726),
        float3( 0.814, -0.142,  0.563),
        float3(-0.251, -0.733,  0.632),
        float3( 0.539, -0.756, -0.373),
        float3(-0.707, -0.513,  0.487),
        float3( 0.496,  0.480, -0.725),
        float3( 0.152,  0.222,  0.963),
        float3(-0.454, -0.344, -0.823),
        float3(-0.134,  0.987, -0.088),
        float3( 0.895,  0.075, -0.440),
        float3( 0.086, -0.679,  0.729),
        float3(-0.936,  0.342,  0.083),
        float3(-0.078, -0.956,  0.283),
        float3(-0.234,  0.088, -0.968),
        float3( 0.289,  0.697, -0.656),
        float3( 0.617,  0.233, -0.751),
        float3( 0.177, -0.305, -0.935),
        float3( 0.735, -0.658, -0.164),
        float3( 0.020,  0.761,  0.648),
        float3(-0.658, -0.252, -0.709),
        float3( 0.783,  0.352, -0.513),
        float3(-0.292,  0.710,  0.640),
        float3( 0.455, -0.837,  0.304),
        float3(-0.273,  0.513, -0.814),
        float3(-0.832, -0.475, -0.287),
        float3( 0.119, -0.812,  0.571),
        float3(-0.050,  0.451,  0.891),
        float3(-0.513, -0.847,  0.132),
        float3( 0.844, -0.055, -0.534),
        float3(-0.317, -0.615,  0.722),
        float3( 0.657, -0.083,  0.749),
        float3(-0.117,  0.707, -0.697),
        float3(-0.562,  0.655,  0.506),
        float3( 0.225,  0.613,  0.756),
        float3( 0.323, -0.910, -0.260),
        float3(-0.944, -0.230, -0.238),
        float3(-0.150,  0.010,  0.989)
};

static const float LengthsSet[85] =
{
    //0.0f,
	0.123f,
	0.652f, 0.999f, 0.184f, 0.515f, 0.908f, 0.303f, 0.427f, 0.726f,
    0.129f, 0.592f, 0.336f, 0.811f, 0.205f, 0.953f, 0.406f, 0.674f, 0.038f,
    0.849f, 0.712f, 0.141f, 0.587f, 0.974f, 0.268f, 0.341f, 0.682f, 0.494f,
    0.058f, 0.760f, 0.887f, 0.126f, 0.649f, 0.211f, 0.804f, 0.437f, 0.319f,
    0.941f, 0.172f, 0.505f, 0.364f, 0.753f, 0.093f, 0.628f, 0.420f, 0.881f,
    0.214f, 0.708f, 0.587f, 0.146f, 0.967f, 0.382f, 0.606f, 0.759f, 0.273f,
    0.493f, 0.827f, 0.104f, 0.640f, 0.358f, 0.918f, 0.234f, 0.738f, 0.407f,
    0.821f, 0.169f, 0.951f, 0.316f, 0.685f, 0.089f, 0.582f, 0.492f, 0.729f,
    0.198f, 0.872f, 0.271f, 0.560f, 0.614f, 0.137f, 0.774f, 0.343f, 0.998f,
    0.192f, 0.135f, 0.890f, 0.613f
};

//In Meters. Please convert the distances to cm to use as TraceRay() input
//Divide by 2 to get the random distance offset multiplier
static const float Layers[12] = 
{
	1.0f,
	2.0f,
	4.0f,
	8.0f,
	16.0f,
	32.0f,
	64.0f,
	128.0f,
	256.0f,
	512.0f,
	1024.0f,
	2048.0f
};