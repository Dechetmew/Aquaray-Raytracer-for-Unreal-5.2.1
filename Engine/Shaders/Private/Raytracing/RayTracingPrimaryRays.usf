// AQUARAY RAYTRACER - v0.4.12
//GI Grid Shader Implementation

// INCLUDES
#include "../DeferredLightingCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingDeferredShadingCommon.ush"
#include "RayTracingLightingCommon.ush"
#include "AquarayStructs.ush"
#include "AquarayFunctions.ush"

// SHADERS INPUTS/OUTPUTS - Manage in RayTracingPrimaryRays.cpp
float4 ColorInput1;
float4 ColorInput2;
float4 ColorInput3;
float4 ColorInput4;
float4 ColorInput5;
float4 ColorInput6;
float4 ColorInput7;
float4 ColorInput8;
float4 ColorInput9;
float FloatInput1; //Sky Visual Brightness
float FloatInput2;
float FloatInput3;
float FloatInput4;
float FloatInput5;
float FloatInput6;
float FloatInput7;
float FloatInput8;
float FloatInput9;
int IntInput1; //MAX_STEPS
int IntInput2; //Detail Lighting Mode (0=OFF 1=AO 2=AO+IIRR) TODO: Implement
int IntInput3; //Debug View Mode (0=OFF 1-15=Debug Viewmodes)
int IntInput4;
int IntInput5;
int IntInput6;
int IntInput7;
int IntInput8;
int IntInput9;

RaytracingAccelerationStructure TLAS;
Texture2D SceneColorTexture;
int UpscaleFactor;
Texture2D<float4> ProbeTexture;
RWTexture2D<float4> ColorOutput;
RWTexture2D<float> RayHitDistanceOutput;

void GetClosestProbeIndices(float3 SamplePosition, int LayerIndex, out int Index1, out int Index2, out int Index3, out int Index4)
{
    float closestDistances[4];
    int   closestIndices[4];

    // Initialize
    [unroll]
    for (int i = 0; i < 4; ++i)
    {
        closestDistances[i] = MetersToCenti(5000); // Unreal units
        closestIndices[i] = -1;
    }

    // Clamp current layer between 0 and max-1
    int maxLayer = 11;
    int neighborLayer = clamp(LayerIndex + 1, 0, maxLayer);

    // Loop through both the current layer and its closest neighbor Layer
    [unroll]
    for (int layer = 0; layer < 2; ++layer)
    {
        int currentLayer = (layer == 0) ? LayerIndex : neighborLayer;
        int baseIndex = currentLayer * 85;

        [loop]
        for (int i = 0; i < 85; ++i)
        {
            int probeIndex = baseIndex + i;
            float3 probePos = ProbeTexture.Load(int3(probeIndex, 1, 0)).xyz;
            float d = distance(probePos, SamplePosition);

            [unroll]
            for (int j = 0; j < 4; ++j)
            {
                if (d < closestDistances[j])
                {
                    // Shift farther ones down
                    [unroll]
                    for (int k = 3; k > j; --k)
                    {
                        closestDistances[k] = closestDistances[k - 1];
                        closestIndices[k] = closestIndices[k - 1];
                    }

                    // Insert current probe
                    closestDistances[j] = d;
                    closestIndices[j] = probeIndex;
                    break;
                }
            }
        }
    }

    // Output final indices
    Index1 = closestIndices[0];
    Index2 = closestIndices[1];
    Index3 = closestIndices[2];
    Index4 = closestIndices[3];
}

int GetLayerIndexByDistance(float distance)
{
    [unroll]
    for (int i = 0; i < 12; ++i)
    {
        if (distance <= MetersToCenti(Layers[i]))
        {
            return i;
        }
    }

    // If distance is greater than the largest layer value, return the last layer
    return 11;
}

/////////////////////////////////////////////////// RAYGEN SHADER

RAY_TRACING_ENTRY_RAYGEN(RayTracingPrimaryRaysRGS)
{
    uint2 DispatchThreadId = DispatchRaysIndex().xy + View.ViewRectMin.xy;
    uint2 PixelCoord = GetPixelCoord(DispatchThreadId, UpscaleFactor);
    float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
    float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;
	
	//Translate Inputs
	float SkyVisualBrightness = FloatInput1;
	int MAX_STEPS = IntInput1;
	int DetailLightingMode = IntInput2;
	int DebugMode = IntInput3;

	// SCENE SETUP
	//Its Fun hunting across All Shaders for what kinds of View Struct variables exist, almost like Collecting Pokemon! 
	float3 SunLightColor = View.DirectionalLightColor.rgb;
	//float3 SunLightColor = float3(1.0f,1.0f,1.0f); //for Debuging
	float3 SunDirection = View.AtmosphereLightDirection[0].xyz;
	
	// INITIAL RAY SETUP
	// RayTMax accepts values in centimeters
	FRayDesc Ray = CreatePrimaryRay(UV); //Gets Camera Position and Direction
	FRayCone RayCone = (FRayCone)0;
	const uint RayFlags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
	const uint InstanceInclusionMask = RAY_TRACING_MASK_ALL;
	const bool bEnableSkyLightContribution = false;
	const bool bIgnoreTranslucentMaterials = false;
	Ray.TMin = 0.0f;
	Ray.TMax = MetersToCenti(100.0f);
	float3 CameraPositionWS = Ray.Origin;

	// STRUCTS
	FMinimalPayload MinimalPayload; //shadow test payload
	FMaterialClosestHitPayload Payload; //main payload
	FMaterialClosestHitPayload DiffusePayload; //detail lighting payload
	int ClosestGIprobes[4]; //indices of the closest GI probes during calculation
	SurfaceHit SurfaceHit; //struct with data for directional calculations
	Stats Stats;
	DiffuseKernel DiffuseKernel[5];
	
	// TODO: Reduce this part
	float3 accumulatedColor = float3(0.0f, 0.0f, 0.0f); //used for averaging
	float accumulatedFloat = 0.0f; //used for averaging
	bool IsSky = false; //if pixel is in sky
	float3 DebugColor = float3(0.0f, 0.0f, 0.0f);
	
	Stats.RaysPerPixel = float3(0.0f, 0.0f, 0.0f);
	Stats.Steps = float3(0.0f, 0.0f, 0.1f);
	
	// 4 Side Rays
	// 4 Lower Rays
	// 4 Higher Rays
	// 1 Up ray (13 rays total)
	for (int i = 0; i < 5; ++i)
	{
		DiffuseKernel[i].Offset       = float3(0.0f, 0.0f, 0.0f);
		DiffuseKernel[i].Color        = float3(0.0f, 0.0f, 0.0f);
		DiffuseKernel[i].Contribution = 0.0f;
		DiffuseKernel[i].LightColor   = float3(0.0f, 0.0f, 0.0f);
		DiffuseKernel[i].Radiance     = float3(0.0f, 0.0f, 0.0f);
		DiffuseKernel[i].Position     = float3(0.0f, 0.0f, 0.0f);
		DiffuseKernel[i].Distance     = 0.0f;
		DiffuseKernel[i].Normal       = float3(0.0f, 0.0f, 0.0f);
	}
	
	//https://academo.org/demos/3d-vector-plotter/ (this is handy)
	//assume x=1.0,y=1.0 is in top right corner, and z=1.0 is up
	//this is in TANGENT SPACE
	DiffuseKernel[0].Offset = float3(0.0f, 1.0f, 1.0f); //forward
	DiffuseKernel[1].Offset = float3(1.0f, 0.0f, 1.0f); //right
	DiffuseKernel[2].Offset = float3(0.0f, -1.0f, 1.0f); //backward
	DiffuseKernel[3].Offset = float3(-1.0f, 0.0f, 1.0f); //left
	
	DiffuseKernel[4].Offset = float3(0.0f, 0.0f, 1.0f); //up
	//vectors are not normalized
	
	//so we normalize them
	for (int i = 0; i < 5; ++i)
	{
		DiffuseKernel[i].Offset = normalize(DiffuseKernel[i].Offset);
	}
	
	//////////// Raysample Struct Init
	Raysample Raysample;
	
	Raysample.Color = float3(0.0f, 0.0f, 0.0f);
	Raysample.Metallic = 0.0f;
	Raysample.Specular = 0.0f;
	Raysample.Emissive = float3(0.0f, 0.0f, 0.0f);
	Raysample.Roughness = 0.0f;
	
	Raysample.LightColor = float3(0.0f, 0.0f, 0.0f);
	Raysample.LightingContribution = 0.0f;
	
	Raysample.IndirectLightColor = float3(0.0f, 0.0f, 0.0f);
	Raysample.IndirectLightingContribution = 0.0f;
	Raysample.RTAO = 1.0f;
	
	Raysample.IndirectRadianceColor = float3(0.0f, 0.0f, 0.0f);
	Raysample.IndirectRadianceContribution = float3(0.0f, 0.0f, 0.0f);
	
	Raysample.IndirectEmissive = float3(0.0f, 0.0f, 0.0f);
	
	Raysample.DirectionalLightMask = 0.0f;
	////////////
	
	// MAIN LOOP (currently loops only once, will loop more times when Translucency and Reflections Get Implemented
	for (int i = 0; i < MAX_STEPS; i++)
	{
		Payload = TraceMaterialRay(
			TLAS,
			RayFlags,
			InstanceInclusionMask,
			Ray,
			RayCone,
			bEnableSkyLightContribution,
			bIgnoreTranslucentMaterials);
			
		Stats.Steps = Stats.Steps + float3(0.0f, 0.1f, 0.0f);
		Stats.RaysPerPixel = Stats.RaysPerPixel + float3(0.05f, 0.0f, 0.0f);
			
		//Debug stuff here
		//ColorOutput[DispatchThreadId] = float4(Payload.BaseColor, 1.0f);
		//break;
		//Also disable output at the bottom when debuging

		if (Payload.IsHit())
		{
			Raysample.Color = Payload.BaseColor;
			Raysample.Metallic = Payload.Metallic;
			Raysample.Specular = Raysample.Specular + PerformSpecular(Payload.WorldNormal, SunDirection, Ray.Direction, Payload.Specular, Payload.Metallic, SunLightColor); //in the future, this will have to run for every light source in a loop
			Raysample.Specular = Raysample.Specular * 0.5f;
			Raysample.Emissive = Payload.Radiance;
			Raysample.DirectionalLightMask = Lambert(SunDirection, Payload.WorldNormal);
		
			SurfaceHit.HitPos = Ray.Origin + Ray.Direction * Payload.HitT + (Payload.WorldNormal * 0.001f);
			SurfaceHit.Distance = Payload.HitT;
			SurfaceHit.IncidentVector = Ray.Direction;
			SurfaceHit.ReflectionVector = reflect(Ray.Direction, Payload.WorldNormal);
			SurfaceHit.RefractionVector = float3(0.0f, 0.0f, 0.0f); //not yet

			RayHitDistanceOutput[DispatchThreadId] = Payload.HitT;
			
			// DIFFUSE KERNEL SAMPLER
			
			//It Traces Rays in a 5-way Kernel Pattern on Every Valid Surface Pixel
			//for Detail lighting like Indirect Irradiance and Ambient Occlusion
			
			//Jitter Up Vectors
			float3 randVec = normalize(GeometryRandVec3(SurfaceHit.HitPos, Payload.HitT) * 2.0f - 1.0f);
			for (int i = 0; i < 5; ++i)
			{
				DiffuseKernel[i].Offset = normalize(lerp(DiffuseKernel[i].Offset, randVec, 0.1f));
			}
			
			float RandomAngle = GeometryRand(SurfaceHit.HitPos, Payload.HitT) * 2.0f * 3.14159f;
			float cosA = cos(RandomAngle);
			float sinA = sin(RandomAngle);

			// Spin in local tangent space (XY plane)
			float3x3 spinMatrix = float3x3(
				float3(cosA, -sinA, 0.0f),
				float3(sinA,  cosA, 0.0f),
				float3(0.0f,   0.0f, 1.0f)
			);

			// Build the tangent basis from surface normal
			float3x3 tangentBasis = BuildTangentBasis(Payload.WorldNormal);

			// Rotate and project each local vector onto the world-space surface
			for (int i = 0; i < 5; ++i)
			{
				float3 spun = mul(DiffuseKernel[i].Offset, spinMatrix);  // Spin in tangent space
				DiffuseKernel[i].Offset = mul(spun, tangentBasis);       // Project to world space
			}
			
			//Is calling this a Kernel Correct? Maybe not?, but whatever
			
			Ray.TMax = MetersToCenti(4.0f);
			
			//Detail Sampling TraceRay Loop
			for (int i = 0; i < 5; i++)
			{			
				Ray.Direction = normalize(Payload.WorldNormal + DiffuseKernel[i].Offset);
				Ray.Origin = SurfaceHit.HitPos;
			
				DiffusePayload = TraceMaterialRay(
					TLAS,
					RayFlags,
					InstanceInclusionMask,
					Ray,
					RayCone,
					bEnableSkyLightContribution,
					bIgnoreTranslucentMaterials);
				
				Stats.RaysPerPixel = Stats.RaysPerPixel + float3(0.05f, 0.0f, 0.0f);
				
				if(DiffusePayload.IsHit())
				{
					//We hit Another Surface
					
					DiffuseKernel[i].Radiance  = DiffusePayload.Radiance * (-CentiToMeter(DiffusePayload.HitT) + 1.0f);
					DiffuseKernel[i].Color  = DiffusePayload.BaseColor * (-CentiToMeter(DiffusePayload.HitT) + 4.0f);
					
					DiffuseKernel[i].Position = Ray.Origin + Ray.Direction * DiffusePayload.HitT + Payload.WorldNormal * 0.001f;
					DiffuseKernel[i].Normal = DiffusePayload.WorldNormal;
					
					DiffuseKernel[i].Distance = clamp(CentiToMeter(DiffusePayload.HitT), 0.0f , 1.0f);
				}
				else
				{
					//We hit nothing
					DiffuseKernel[i].Radiance  = float3(0.0f,0.0f,0.0f);
					DiffuseKernel[i].Color  = float3(0.0f,0.0f,0.0f);
					
					DiffuseKernel[i].Position = float3(0.0f,0.0f,0.0f);
					DiffuseKernel[i].Normal = float3(0.0f,0.0f,0.0f);
					DiffuseKernel[i].Distance = 1.0f;
				}

			}
			//End loop
			
			accumulatedColor = float3(0.0f, 0.0f, 0.0f);
			for (int i = 0; i < 5; ++i)
			{
				accumulatedColor += DiffuseKernel[i].Color;
			}
			Raysample.IndirectRadianceColor = accumulatedColor / 5.0f;
			Raysample.IndirectRadianceColor = Raysample.IndirectRadianceColor * 0.02f; //TODO: Parametrize
			
			accumulatedColor = float3(0.0f, 0.0f, 0.0f);
			for (int i = 0; i < 5; ++i)
			{
				accumulatedColor += DiffuseKernel[i].Radiance;
			}
			Raysample.IndirectEmissive = accumulatedColor / 5.0f;
			Raysample.IndirectEmissive = Raysample.IndirectEmissive * 0.15f; //TODO: Parametrize
			
			accumulatedFloat = 0.0f;
			for (int i = 0; i < 5; ++i)
			{
				accumulatedFloat += DiffuseKernel[i].Distance;
			}
			Raysample.RTAO = accumulatedFloat / 5.0f;

			//END OF MICROCODE
			
			// INDIRECT LIGHTING MICROCODE
			//Due to how I mix direct and indirect lighting, I will have to calculate it even on directly lit pixels to allow smooth mixing.
			//Maybe cut it off if the DirectLightMask is high enough?
			//Here we sample and apply Global Illumination
			
			//Gets on which distance layer we are on to reduce the amount of needed texture loads
			int CurrentLayer = GetLayerIndexByDistance(SurfaceHit.Distance);
			CurrentLayer = clamp(CurrentLayer, 0, 12); //Just in case
			
			GetClosestProbeIndices(SurfaceHit.HitPos, CurrentLayer, ClosestGIprobes[0], ClosestGIprobes[1], ClosestGIprobes[2], ClosestGIprobes[3]);
			
			float3 s1 = ProbeTexture.Load(int3(ClosestGIprobes[0], 0, 0)).rgb;
			float3 s2 = ProbeTexture.Load(int3(ClosestGIprobes[1], 0, 0)).rgb;
			float3 s3 = ProbeTexture.Load(int3(ClosestGIprobes[2], 0, 0)).rgb;
			float3 s4 = ProbeTexture.Load(int3(ClosestGIprobes[3], 0, 0)).rgb;
			
			float3 GIfinal = (s1 + s2 + s3 + s4) / 4.0f;
			
			if (ClosestGIprobes[0] < 0)
			{
				Raysample.IndirectLightColor = float3(1, 0, 0); // invalid index if true
			}
			else
			{
				//Raysample.IndirectLightColor = GIfinal;
				Raysample.IndirectLightColor = float3(0.5f,0.5f,0.5f);
				//Raysample.IndirectLightColor = (float3(1.0,1.0,1.0) * CurrentLayer) / 12;
			}
			
		    Raysample.IndirectLightingContribution = 1.0f; // Not needed probably, remove in future
			
			// END OF INDIRECT LIGHTING MICROCODE

			//Terminate Early if Possible
			if (!CanBeLit(Payload.WorldNormal, SunDirection))
			{
				//The Surface Must be in shadow, so we give up early
				break;	
			}
			
			Ray.Origin = SurfaceHit.HitPos;
			Ray.TMax = MetersToCenti(100.0f);
			Ray.Direction = SunDirection;

			MinimalPayload = TraceVisibilityRay(
				TLAS,
				RayFlags,
				RAY_TRACING_PAYLOAD_INPUT_FLAG_NONE,
				InstanceInclusionMask,
				Ray);
			
			if (MinimalPayload.IsHit())
			{
				//The Surface is in shadow anyways
				break;
			}
			else
			{
				//The Sun is Shining :)
				Raysample.LightColor = SunLightColor; //Add lightbulbs later
				Raysample.LightingContribution = Lambert(SunDirection, Payload.WorldNormal);
				break;
			}			
			
		}
		else
		{
			//We hit the Sky
			IsSky = true;
			break;
		}
	}
	//End of Raypath Loop
	
	if (IsSky)
	{
		ColorOutput[DispatchThreadId] = float4(GetSkyRadiance(Ray.Direction, 0.0f) * SkyVisualBrightness, 1.0f);
		//ColorOutput[DispatchThreadId] = float4(Stats.RaysPerPixel, 1.0f); //Debug
		//ColorOutput[DispatchThreadId] = float4(Stats.Steps, 1.0f); //Debug
	}
	else
	{
		//Just in case clamp Raysample struct to sensical ranges
		//variable = clamp(variable, min, max);
		Raysample.Color = clamp(Raysample.Color, 0.0f, 1.0f);
		Raysample.Metallic = clamp(Raysample.Metallic, 0.0f, 1.0f); //Only used in specular calc
		Raysample.Specular = clamp(Raysample.Specular, 0.0f, 1.0f); //Only used in specular calc
		Raysample.Emissive = clamp(Raysample.Emissive, 0.0f, 100.0f);
		Raysample.Roughness = clamp(Raysample.Roughness, 0.0f, 1.0f); //Only used in specular calc
	
		Raysample.LightColor = clamp(Raysample.LightColor, 0.0f, 1.0f);
		Raysample.LightingContribution = clamp(Raysample.LightingContribution, 0.0f, 10.0f);
		Raysample.RTAO =  clamp(Raysample.RTAO, 0.0f, 1.0f); //should be parametrized
		
		Raysample.IndirectLightColor = clamp(Raysample.IndirectLightColor, 0.0f, 1.0f); //GIgrid
		Raysample.IndirectLightingContribution = clamp(Raysample.IndirectLightingContribution, 0.0f, 1.0f); //GIgrid
		
		Raysample.IndirectRadianceColor = clamp(Raysample.IndirectRadianceColor, 0.0f, 1.0f); //Currently unused
		Raysample.IndirectRadianceContribution = clamp(Raysample.IndirectRadianceContribution, 0.0f, 10.0f); //Currently unused
		
		Raysample.IndirectEmissive = clamp(Raysample.IndirectEmissive, 0.0f, 10.0f);
	
		Raysample.DirectionalLightMask = clamp(Raysample.DirectionalLightMask, 0.0f, 1.0f);
		//////////////////////////
		
		//////////////////////////
		// A little Hack to make IIRR look nicer (im keeping it here for possible future use, currently Unused)
		float3 color = Raysample.IndirectRadianceColor;

		// get max and min channel values
		float maxChannel = max(color.r, max(color.g, color.b));
		float minChannel = min(color.r, min(color.g, color.b));

		// If all channels are nearly equal, this value will be near 0
		float colorContrast = maxChannel - minChannel;

		float suppression = 1.0 - saturate(colorContrast * 5.0); // last float controls IIRR power

		color *= 1.0 - suppression;

		Raysample.IndirectRadianceColor = color * 15.0;
		//////////////////////////
	
		//Final pixel color calculation from Raysample struct data
		float3 Out;
		float3 Final;
		float3 Direct;
		float3 Indirect;
		
		//debug, for previewing Raysample data
		Out = Stats.RaysPerPixel;
		
		//DIRECT PART
		Direct = Raysample.Color + Raysample.Specular; //Apply Surface Color + Specular
		Direct = Direct * (Raysample.LightColor * Raysample.LightingContribution); //Apply Direct Lighting
		
		//INDIRECT PART
		Indirect = Raysample.Color * Raysample.IndirectLightingContribution; //Apply GIgrid power
		Indirect = Indirect * Raysample.IndirectLightColor; //Apply GIgrid Color
		Indirect = Indirect * Raysample.RTAO; //Apply Ambient Occlusion
		Indirect = Indirect + (Raysample.IndirectEmissive * Raysample.Color); //Apply Detail Lighting Emissive
		
		//Combined Lighting
		Final = max(Indirect, Direct) + Raysample.Emissive * 8.0f; //Apply Direct Emissive
		
		// uninitialized variables can sometimes end up reading garbage data if the code is messed up, causing NaN (and D3D crashes)
		if (any(isnan(Out)) || any(isinf(Out)))
		{
			Out = float3(1, 0, 1);
		}
		
		if (DebugMode == 0)
		{
			// Main Output
			ColorOutput[DispatchThreadId] = float4(Final, 1.0f);
		}
		else
		{
			//Debug Viewmodes
			switch(DebugMode)
			{
				//Global Illumination Texture (1024x4)
				case 1:
				if ((DispatchRaysIndex().x >= 50 && DispatchRaysIndex().x < 1074) &&
					(DispatchRaysIndex().y >= 50 && DispatchRaysIndex().y < 54))
				{
					ColorOutput[DispatchThreadId] = ProbeTexture.Load(int3(DispatchRaysIndex().xy - int2(50, 50), 0));
				}
				else
				{
					ColorOutput[DispatchThreadId] = float4(Final, 1.0f);
				}
				break;
				
				case 2: ColorOutput[DispatchThreadId] = float4(Raysample.Color, 1.0f); break;
				case 3: ColorOutput[DispatchThreadId] = float4(Raysample.Metallic.xxx, 1.0f); break;
				case 4: ColorOutput[DispatchThreadId] = float4(Raysample.Specular.xxx, 1.0f); break;
				case 5: ColorOutput[DispatchThreadId] = float4(Raysample.Emissive, 1.0f); break;
				case 6: ColorOutput[DispatchThreadId] = float4(Raysample.Roughness.xxx, 1.0f); break;
				case 7: ColorOutput[DispatchThreadId] = float4(Raysample.LightColor, 1.0f); break;
				case 8: ColorOutput[DispatchThreadId] = float4(Raysample.LightingContribution.xxx, 1.0f); break;
				case 9: ColorOutput[DispatchThreadId] = float4(Raysample.RTAO.xxx, 1.0f); break;
				case 10: ColorOutput[DispatchThreadId] = float4(Raysample.IndirectLightColor, 1.0f); break;
				case 11: ColorOutput[DispatchThreadId] = float4(Raysample.IndirectLightingContribution.xxx, 1.0f); break;
				case 12: ColorOutput[DispatchThreadId] = float4(Raysample.IndirectRadianceColor, 1.0f); break;
				case 13: ColorOutput[DispatchThreadId] = float4(Raysample.IndirectRadianceContribution, 1.0f); break;
				case 14: ColorOutput[DispatchThreadId] = float4(Raysample.IndirectEmissive, 1.0f); break;
				case 15: ColorOutput[DispatchThreadId] = float4(Raysample.DirectionalLightMask.xxx, 1.0f); break;
				default: ColorOutput[DispatchThreadId] = float4(Final, 1.0f); break;
			}
		}
	}
} //A Happy Ending of The Raygen Shader